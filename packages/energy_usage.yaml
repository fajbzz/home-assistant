input_select:
  energy_month_limit:
    name: Monthly energy limit
    options: 
      - 2000
      - 5000
      - 10000
      - 15000
      - 20000

input_text: 
  max_3hour_month_usage:
    name: Max energy usage 3 hours this month
    max: 40

input_number:
  today_max_usage: 
    name: Max energy for an hour today
    max: 20
    min: 0
    step: 0.001
    mode: box


sensor:
- platform: integration
  name: energiforbruk
  source: sensor.amshan_power_import
  method: left
  round: 2
  unit_prefix: k
  unit_time: h
- platform: integration
  name: energiproduksjon
  source: sensor.amshan_power_export
  method: left
  round: 2
  unit_prefix: k
  unit_time: h
- platform: statistics
  name: average unscheduled power usage
  entity_id: sensor.power_unscheduled
  state_characteristic: average_linear
  max_age:
    hours: 24
  sampling_size: 1440

utility_meter:
  energiforbruk_time:
    source: sensor.energiforbruk
    cycle: hourly
  energiproduksjon_time:
    source: sensor.energiproduksjon
    cycle: hourly
  uncontrolled_hourly:
    source: sensor.power_uncontrolled
    cycle: hourly
  energy_usage_month:
    source: sensor.energiforbruk
    cycle: monthly
  energy_production_month:
    source: sensor.energiproduksjon
    cycle: monthly

template:
  - sensor:
    - name: rest_of_month_energy_limit
      unit_of_measurement: Wh
      device_class: energy
      state: >
        {% set limits = [0] + state_attr('input_select.energy_month_limit', 'options') %}
        {% set target = states('input_select.energy_month_limit')|int %}
        {% set max3 = (( states('input_text.max_3hour_month_usage')|from_json +
                      [states('input_number.today_max_usage')|float])|sort(1))[:3] %}
        {% set v = namespace (abovelimit=[], rest_of_month = 0) %}
        {% if max3|length >= 3 and (max3|average * 1000) >= target %}
          {% for option in states.input_select.energy_month_limit.attributes.options %}
            {% if option|int > target %}
              {% set v.abovelimit = v.abovelimit + [ option|int ] %}
            {% endif %}
          {% endfor %}
          {{ v.abovelimit[0] }}
        {% else %}
          {% for i in range(max3|length) %}
            {% set v.abovelimit = v.abovelimit + [ max3[i] * 1000 ]
                   if max3[i] * 1000 >= target else v.abovelimit %}
          {% endfor %}
          {% if v.abovelimit|length >0 %}
            {% if v.abovelimit|length < 3 %}
              {% set v.rest_of_month =  (target * 3 - average(v.abovelimit) * v.abovelimit|length) / (3 - v.abovelimit|length) %}
            {% endif %}
            {% if v.abovelimit|length >= 3  or average(states('sensor.uncontrolled_estimate')|from_json) + 3000 > v.rest_of_month %}
              {% for i in range(1,limits|length) %}
                {% if average(v.abovelimit) > limits[i - 1]|int and average(v.abovelimit) <= limits[i]|int %}
                  {% set v.rest_of_month = limits[i] %}
                {% endif %}
              {% endfor %}
            {% endif %}
            {{ v.rest_of_month }}
          {% else %}
            {{ target }}
          {% endif %}
        {% endif %}
    - name: power_controlled
      unit_of_measurement: W
      device_class: power
      state: >
        {{ states('sensor.vv_tank_power')|int(default=0)
           + states('sensor.stikk_vv_kjeller_power')|int(default=0)
           + states('sensor.stikk_vaskemaskin_power')|int(default=0)
           + states('sensor.stikk_torketrommel_power')|int(default=0)
           + states('sensor.shellyhvitevare_komfyr_power')|int(default=0)
           + states('sensor.shellyhvitevare_oppvask_power')|int(default=0)
           + states('sensor.easee_power')|int(default=0) }}
    - name: power_uncontrolled
      unit_of_measurement: W
      device_class: power
      state: >
        {% set uncontrolled =  states('sensor.power_usage')|int(default=0)
         - states('sensor.power_controlled')|int(default=0) %}
        {{ uncontrolled if uncontrolled > 0 else 0 }}
    - name: power_monitored
      unit_of_measurement: W
      device_class: power
      state: >
        {{ states('sensor.stikk_vp_oppe_power')|int(default=0)
         + states('sensor.stikk_vp_nede_power')|int(default=0)
         + states('sensor.kjoleskap_electric_consumption_w')|int(default=0)
         + states('sensor.inngangstikk_power')|int(default=0)
         + states('sensor.server_power')|int(default=0)
         + states('sensor.baderomsgulv_electric_consumption_w')|int(default=0)
         + states('sensor.plugg_fryser_power')|int(default=0)
         + states('sensor.shellykjol_switch_0_power')|int(default=0)
         + states('sensor.adax_guest_power')|int(default=0)
         + states('sensor.adax_syrom_power')|int(default=0)
         + states('sensor.adax_faoff_power')|int(default=0) }}
    - name: power_unmonitored
      unit_of_measurement: W
      device_class: power
      state: >
        {% set unmonitored =  states('sensor.power_uncontrolled')|int(default=0)
         - states('sensor.power_monitored')|int(default=0) %}
        {{ unmonitored if unmonitored > 0 else 0 }}
    - name: power_usage
      unit_of_measurement: W
      device_class: power
      state: >
        {{ states('sensor.amshan_power_import')|int(default=0)
           + states('sensor.pvlogger_power')|int(default=0)
           - states('sensor.amshan_power_export')|int(default=0) }}
    - unique_id: power_in_or_out
      unit_of_measurement: 'W'
      state: "{{ states('sensor.amshan_power_import')|int -  states('sensor.amshan_power_export')|int }}"
      attributes:
        friendly_name: 'Kraft forbrukt fra eller levert til nettet'
    - name: last_energy_reading
      unit_of_measurement: 'kWh'
      state: >
        {% set last_energy_reading = states('input_number.last_energy_reading') %}
        {{ last_energy_reading }}
    - name: energy_this_hour_estimate
      unit_of_measurement: 'kWh'
      state: >
        {% set mnow = now().minute %}
        {% set mleft = 60 - mnow %}
        {% set enow = states('sensor.energiforbruk_time')|float * 1000 if mnow > 1 else 0 %}
        {% set pnow = states('sensor.amshan_power_import')|int %}
        {{ (enow + pnow * mleft  / 60)|int / 1000 }}
    - name: today_max_usage_guestimate
      unit_of_measurement: 'kWh'
      state: >
        {% set todaymax = states('input_number.today_max_usage')|float(default=0) %}
        {% set this = states('sensor.energy_this_hour_estimate')|float %}
        {{ ([todaymax, this]|sort(1))[0] }}
    - name: max_3hour_month_usage_average
      unit_of_measurement: 'kWh'
      state: >
        {% set max3 = states('input_text.max_3hour_month_usage')|from_json %}
        {% set today = states('sensor.today_max_usage_guestimate')|float %}
        {% set max3 = ((max3 + [today])|sort(1))[:3] %}
        {% set v = namespace (sum=0) %}
        {% for i in range (max3|length) %}
        {%   set v.sum = v.sum + max3[i] %}
        {% endfor %}
        {{ (v.sum / max3|length)|round(3) }}

    - name: power_available
      state: 'See attribute hours'
      attributes:
        hours: >
          {% set var = namespace (available = []) %}
          {% set forecast = states('sensor.forecast_solar_48h')|from_json %}
          {% set month_limit = states('sensor.rest_of_month_energy_limit')|int %}
          {% set uctrld = states('input_text.uncontrolled_estimate')|from_json|average|int %}
          {% for i in range(forecast|length) %}
          {% set solar = 0 if forecast[i] <= uctrld else forecast[i] - uctrld %}
          {% set grid = month_limit if forecast[i] > uctrld else
                        month_limit + forecast[i] - uctrld %}
          {% set var.available = var.available + [ { "s": solar, "g": grid }] %}
          {% endfor %}
          {{ var.available }}
    - name: power_usage_by_subsides_and_maxpower
      state: >
        {# variables that needs to be declared #}
        {% set var = namespace (available = [], price = [], main = [], aux = [], ev = [] ) %}
        {# pv/solar production forecast, monthly grid usage limit, prices to/from grid, 
          uncontrolled usage and calculated subsides #}
        {% set forecast = states('sensor.forecast_solar_48h')|from_json %}
        {% set month_limit = states('sensor.rest_of_month_energy_limit')|int %}
        {% set energy_price = state_attr('sensor.energy_all_nok_kwh', 'prices') %}
        {% set grid_price = states('sensor.to_grid_today_nok_kwh')|from_json + states('sensor.to_grid_tomorrow_nok_kwh')|from_json %}
        {% set uctrld = states('input_text.uncontrolled_estimate')|from_json|average|int %}
        {% set subsides = states('sensor.energy_subsides')|float %}
        {# calculates how much is avalible from solar to be used #}
        {% for i in range(forecast|length) %}
        {% set solar = 0 if forecast[i] <= uctrld else forecast[i] - uctrld %}
        {% set grid = month_limit if forecast[i] > uctrld else
                      month_limit + forecast[i] - uctrld %}
        {% set var.available = var.available + [ { "s": solar, "g": grid }] %}
        {% endfor %}
        {# Fetch main water heater variables #}
        {% set main_power = states('sensor.vvtank_power_when_on')|int(default=3000) %}
        {% set main_time = as_local(as_datetime(state_attr('sensor.vvtank_cycle_1', 'last_reset'))) %}
        {% set main_usage = (states('counter.vvtank_usage')|int * 200 - states('sensor.vvtank_cycle_1')|float(default=0) * 1000)|int %}
        {# limit tells when water heater should be done, and turned of by built in thermostat #}
        {% set limit = main_time.hour + 24 if main_time.day == now().day else
                       main_time.hour if main_time.hour > now().hour else
                            now().hour %}
        {% set limit = 7 if (limit <= 7 and now().weekday() > 4) else
                      6 if limit <= 6 else
                      15 if limit <= 15 else
                      limit if limit <= 23 else
                      31 if (limit <= 31 and now().weekday()  in [ 4, 5]) else
                      30 if limit <= 30 else
                      39 if limit <= 39 else
                      limit %}
        {% set limit = energy_price|length -1 if limit >= energy_price|length else
                            limit %}
        {# calculate cost for using main water heater based on availible solar or grid price #}
        {% for i in range(energy_price|length) %}
          {%- set price = grid_price[i] if var.available[i].s > main_power else 
                         (grid_price[i] * var.available[i].s + (energy_price[i] - subsides) * (main_power - var.available[i].s))/main_power %}
          {% set var.price = var.price + [ { "hour" : i, "price" : price|round(3) }] %}
        {%- endfor %}
        {% set pricemain = var.price %}
        {% set var.price = var.price|sort(attribute="price") %}
        {% set var.used = 0 %}
        {% set var.done = 0 %}
        {%- for i in range(var.price|length) %}
          {%- if var.price[i].hour >= now().hour and
                var.price[i].hour <= limit  and var.done == 0 -%}
            {%- set uses = main_power %}
            {%- set needs = (var.price[i].hour - main_time.hour) * 140 + main_usage - var.used %}
            {%- set needs = needs if main_time.day == now().day else needs + 140 * 24 %}
            {%- set var.done = 1 if uses > needs else var.done %}
            {%- set uses = uses if uses < needs else  needs %}
            {%- set var.used = var.used + uses %}
            {%- set var.main = var.main + [ var.price[i].hour ] %}
            {%- set solar = 0 if var.available[i].s < uses else
                                var.available[i].s - uses %}
            {%- set grid = var.available[i].g if var.available[i].s >= uses else
                                var.available[i].g + var.available[i].s - uses %}
            {%- set var.available = var.available[:var.price[i].hour] + 
                                   [{ "s": solar, "g": grid }] +
                                   var.available[var.price[i].hour+1:] %}
          {%- endif %}
        {%- endfor %}
        {% set var.price = [] %}
        {% set aux_power = states('sensor.vvkjeller_power_when_on')|int(default=2000) %}
        {% set aux_time = as_local(as_datetime(state_attr('sensor.vvkjeller_cycle_1', 'last_reset'))) %}
        {% set aux_usage = (states('counter.vvkjeller_usage')|int * 200 - states('sensor.vvkjeller_cycle_1')|float(default=0) * 1000)|int %}
        {% set limit = aux_time.hour + 24 if aux_time.day == now().day else
                       aux_time.hour if aux_time.hour > now().hour else
                            now().hour %}
        {% set limit = 7 if (limit <= 7 and now().weekday() > 4) else
                      6 if limit <= 6 else
                      15 if limit <= 15 else
                      limit if limit <= 23 else
                      31 if (limit <= 31 and now().weekday()  in [ 4, 5]) else
                      30 if limit <= 30 else
                      39 if limit <= 39 else
                      limit %}
        {% set limit = energy_price|length -1 if limit >= energy_price|length else
                            limit %}
        {% for i in range(energy_price|length) %}
          {% set power = aux_power if (var.available[i].s + var.available[i].g > aux_power) else
                          var.available[i].s + var.available[i].g %}
          {%- set price = grid_price[i] if var.available[i].s > power else 
                         (grid_price[i] * var.available[i].s + (energy_price[i] - subsides) * (power - var.available[i].s))/power %}
          {% set var.price = var.price + [ { "hour" : i, "price" : price|round(3) }] %}
        {%- endfor %}
        {% set priceaux = var.price %}
        {% set var.price = var.price|sort(attribute="price") %}
        {% set var.used = 0 %}
        {% set var.done = 0 %}
        {%- for i in range(var.price|length) %}
          {%- if var.price[i].hour >= now().hour and
                var.price[i].hour <= limit  and var.done == 0 -%}
            {%- set uses = aux_power %}
            {%- set needs = (var.price[i].hour - aux_time.hour) * 140 + aux_usage - var.used %}
            {%- set needs = needs if aux_time.day == now().day else needs + 140 * 24 %}
            {%- set var.done = 1 if uses > needs else var.done %}
            {%- set uses = uses if uses < needs else  needs %}
            {%- set var.used = var.used + uses %}
            {%- set var.aux = var.aux + [ var.price[i].hour ] %}
            {%- set solar = 0 if var.available[i].s < uses else
                                var.available[i].s - uses %}
            {%- set grid = var.available[i].g if var.available[i].s >= uses else
                                var.available[i].g + var.available[i].s - uses %}
            {%- set var.available = var.available[:var.price[i].hour] + 
                                   [{ "s": solar, "g": grid }] +
                                   var.available[var.price[i].hour+1:] %}
          {%- endif %}
        {%- endfor %}
        {% set var.price = [] %}
        {% set ev_power = 3500 %}
        {% set ev_soc = states('sensor.soc_estimate')|float %}
        {% if states('input_boolean.charge_by_clock') == 'on' %}
          {% set ev_target = states('input_number.ev_charge_target')|int(default=90) %}
          {% set limit = state_attr('input_datetime.car_ready_charged','hour') %}
          {% set limit = limit if limit > now().hour else limit + 24 %}
        {% elif ev_soc <= 50 %}
          {% set ev_target = 50 %}
          {% set limit = now().hour + 12 %}
        {% else %}
          {% set ev_target = states('input_number.ev_charge_target')|int(default=90) %}
          {% set limit = 48 %}
        {% endif %}
        {% set ev_full = states('input_number.ev_battery_pack')|int %}
        {% set ev_target = ev_target * ev_full / 100 %}
        {% set var.ev_soc = ev_soc * ev_full / 100 %}
        {% set limit = energy_price|length -1 if limit >= energy_price|length else
                            limit %}
        {% for i in range(energy_price|length) %}
          {% set power = ev_power if (var.available[i].s + var.available[i].g > ev_power) else
                          var.available[i].s + var.available[i].g %}
          {%- set price = grid_price[i] if var.available[i].s > power else 
                         (grid_price[i] * var.available[i].s + (energy_price[i] - subsides) * (power - var.available[i].s))/power %}
          {% set var.price = var.price + [ { "hour" : i, "price" : price|round(3) }] %}
        {%- endfor %}
        {% set var.price = var.price|sort(attribute="price") %}
        {% set ev_efficient = states('input_number.ev_charge_efficiency')|float / 100 %}
        {% for i in range(var.price|length) %}
          {% if var.price[i].hour >= now().hour and
                var.price[i].hour <= limit  and var.ev_soc < ev_target %}
            {% set needs = (ev_target - var.ev_soc) / ev_efficient  %}
            {% set uses = ev_power %}
            {% set uses = uses if uses < needs else needs %}
            {% set var.ev = var.ev + [ var.price[i].hour ] %}
            {% set var.ev_soc = var.ev_soc + uses * ev_efficient %}
            {% set solar = 0 if var.available[i].s < uses else
                                var.available[i].s - uses %}
            {% set grid = var.available[i].g if var.available[i].s >= uses else
                                var.available[i].g + var.available[i].s - uses %}
            {% set var.available = var.available[:var.price[i].hour] + 
                                   [{ "s": solar, "g": grid }] +
                                   var.available[var.price[i].hour+1:] %}
          {% endif %}
        {% endfor %}
        {{ { "vvtank" : var.main|sort, 
             "vvkjeller" : var.aux|sort, 
             "easee" : var.ev|sort }|to_json }}
    - name: power_usage_by_subsides_and_maxpower_temp
      state: >
        {% set var = namespace ( prices = [], uncontrolled = [], loop_done=0, used=0, main=[], aux=[], car=[] ) %}
        {% set car_ready = state_attr('input_datetime.car_ready_charged','hour') %}
        {% set car_ready = car_ready if car_ready > now().hour else car_ready + 24 %}
        {% set car_full = states('input_number.ev_battery_pack')|int %}
        {% set car_soc = states('sensor.soc_estimate')|float %}
        {% set car_target = states('input_number.ev_charge_target')|int(default=90) %}
        {% set car_target = car_soc if car_target < car_soc else car_target %}
        {% set car_needs = ((car_target-car_soc) * car_full / 100)|int %}
        {% set subsides = states('sensor.energy_subsides')|float %}
        {% set pv_guess = states('sensor.forecast_solar_48h')|from_json %}
        {% set energy_price =  state_attr('sensor.energy_all_nok_kwh', 'prices') %}
        {% set price_to_grid = states('sensor.to_grid_today_nok_kwh')|from_json  + 
                               states('sensor.to_grid_tomorrow_nok_kwh')|from_json %}
        {% set var.uncontrolled = states('input_text.uncontrolled_estimate')|from_json %}
        {% set var.uncontrolled = var.uncontrolled + var.uncontrolled %}
        {% set limit = states('sensor.rest_of_month_energy_limit') %}
        {% set main_time = as_local(as_datetime(state_attr('sensor.vvtank_cycle_1', 'last_reset'))) %}
        {% set main_usage = (states('counter.vvtank_usage')|int * 200 - states('sensor.vvtank_cycle_1')|float(default=0) * 1000)|int %}
        {% set main_power = states('sensor.vvtank_power_when_on')|int(default=3000) %}
        {% set aux_time = as_local(as_datetime(state_attr('sensor.vvkjeller_cycle_1', 'last_reset'))) %}
        {% set aux_usage = (states('counter.vvkjeller_usage')|int * 200 -
                            states('sensor.vvkjeller_cycle_1')|float(default=0) * 1000)|int %}
        {% set aux_power = states('sensor.vvkjeller_power_when_on')|int(default=2000) %}
        {% for i in range(energy_price|count) %}
          {% if var.uncontrolled[i] > pv_guess[i] %}
            {% set var.uncontrolled = var.uncontrolled[:i] + 
                                    [ var.uncontrolled[i] - pv_guess[i] ] + 
                                    var.uncontrolled[i+1:] %}
            {% set available = 0 %}
          {% else %}
            {% set available = pv_guess[i] - var.uncontrolled[i] %}
            {% set var.uncontrolled = var.uncontrolled[:i] + [ 0 ] + var.uncontrolled[i+1:] %}
          {% endif %}
          {% set var.prices = var.prices + [ { "buyorsell": "s", "hour": i, "avail": available, "price": price_to_grid[i] } ] %}
        {% endfor %}
        {% for i in range(energy_price|count) %}
          {% set var.prices = var.prices + [ { "buyorsell": "b", "hour": i, "avail": limit|int, "price": energy_price[i] - subsides } ] %}
        {% endfor %}
        {% set var.prices = var.prices|sort(attribute="price") %}
        {% set limit = main_time.hour + 24 if main_time.day == now().day else  
                       main_time.hour if main_time.hour > now().hour else  
                            now().hour %} 
        {% set limit = 7 if (limit <= 7 and now().weekday() > 4) else 
                      6 if limit <= 6 else  
                      15 if limit <= 15 else  
                      limit if limit <= 23 else  
                      31 if (limit <= 31 and now().weekday()  in [ 4, 5]) else 
                      30 if limit <= 30 else  
                      39 if limit <= 39 else  
                      limit %} 
        {% set limit = energy_price|length -1 if limit >= energy_price|length else  
                            limit %} 
        {% set var.used = 0 %} 
        {% set var.loop_done = 0 %} 
        {% for i in range(var.prices|length) %}
          {% if var.prices[i].hour <= limit  and var.prices[i].hour >= now().hour and var.prices[i].avail > 500 and var.loop_done == 0 %}
            {% set uses = var.prices[i].avail if var.prices[i].avail < main_power else main_power %}
            {% set needs = (var.prices[i].hour - main_time.hour) * 140 + main_usage - var.used %}
            {% set needs = needs if main_time.day == now().day else needs + 140 * 24 %}
            {% set var.loop_done = 1 if uses > needs else 0 %}
            {% set uses = uses if uses < needs else needs %}
            {% set var.main = var.main + [var.prices[i].hour] if uses > 0 else var.main %}
            {% set var.used = var.used + uses %}
            {% set var.prices = var.prices[:i] + 
                                [ { "hour": var.prices[i].hour, 
                                    "price": var.prices[i].price, 
                                    "avail": var.prices[i].avail-uses} ] +
                                var.prices[i+1:] %} 
          {% endif %}
        {% endfor %}
        {% set limit = aux_time.hour + 24 if aux_time.day == now().day else 
                  aux_time.hour if aux_time.hour > now().hour else 
                  now().hour %}
        {% set limit = 7 if (limit <= 7 and now().weekday() > 4) else
                    6 if limit <= 6 else
                    15 if limit <= 15 else
                    limit if limit <= 23 else
                    31 if (limit <= 31 and now().weekday()  in [ 4, 5]) else
                    30 if limit <= 30 else
                    39 if limit <= 39 else
                    limit %}
        {% set limit = energy_price|length -1 if limit >= energy_price|length else
                          limit %}
        {% set var.used = 0 %}
        {% set var.loop_done = 0 %}
        {% for i in range(var.prices|length) %}
          {% if var.prices[i].hour <= limit  and var.prices[i].hour >= now().hour and var.prices[i].avail > 500 and var.loop_done == 0 %}
            {% set uses = var.prices[i].avail if var.prices[i].avail < aux_power else aux_power %}
            {% set needs = (var.prices[i].hour - aux_time.hour) * 90 + aux_usage - var.used %}
            {% set needs = needs if aux_time.day == now().day else needs + 140 * 24 %}
            {% set var.loop_done = 1 if uses > needs else 0 %}
            {% set uses = uses if uses < needs else needs %}
            {% set var.aux = var.aux + [var.prices[i].hour] if uses > 0 else var.aux %}
            {% set var.used = var.used + uses %}
            {% set var.prices = var.prices[:i] +
                                [ { "hour": var.prices[i].hour,
                                    "price": var.prices[i].price,
                                    "avail": var.prices[i].avail-uses} ] +
                                var.prices[i+1:] %}
          {% endif %}
        {% endfor %}
        {% set limit = energy_price|length -1 if car_ready >= energy_price|length else
                            car_ready -1 %}
        {% set var.used = 0 %}
        {% set var.loop_done = 0 %}
        {% for i in range(var.prices|length) %}
          {% if var.prices[i].hour <= limit and var.prices[i].hour >= now().hour and var.prices[i].avail > 500 and var.loop_done == 0 %}
            {% set uses = var.prices[i].avail if var.prices[i].avail < 3500 else 3500 %}
            {% set needs = car_needs - (var.used * 0.875)|int %}
            {% set var.loop_done = 1 if uses > needs else 0 %}
            {% set uses = uses if uses < needs else needs %}
            {% set var.car = var.car + [var.prices[i].hour] if uses > 0 else var.car %}
            {% set var.used = var.used + uses %}
            {% set var.prices = var.prices[:i] +
                                [ { "hour": var.prices[i].hour,
                                    "price": var.prices[i].price,
                                    "avail": var.prices[i].avail-uses} ] +
                                var.prices[i+1:] %}
          {% endif %}
        {% endfor %}
        {{ { "vvtank": var.main|sort, 
             "vvkjeller" :  var.aux|sort ,
             "easee" : var.car|sort }|to_json }}

  - trigger:
      - platform: time_pattern
        minutes: "*"
    sensor:
    - name: power_unscheduled
      unit_of_measurement: W
      device_class: power
      state: >
        {% set usage = states('sensor.power_usage')|int(default=0) %}
        {% set scheduled = states('sensor.vv_tank_power')|int(default=0)
                         + states('sensor.shellyhvitevare_komfyr_power')|int(default=0)
                         + states('sensor.stikk_vaskemaskin_power')|int(default=0)
                         + states('sensor.stikk_torketrommel_power')|int(default=0)
                         + states('sensor.stikk_vv_kjeller_power')|int(default=0)
                         + states('sensor.easee_power')|int(default=0) %}
        {{ usage - scheduled if usage > scheduled else 0 }}

  - trigger: 
    - platform: template
      value_template: "{{ states('sensor.energiforbruk_time')|float < 0.1}}"
    sensor: 
    - name: "Energy max today"
      unit_of_measurement: "kWh"
      state: >
        {% set last = states('sensor.energy_max_today') %}
        {% set last = 0 if last in ['unknown', 'unavailible'] or now().hour == 1 else last|float  %}
        {% set new = trigger.from_state.state | float %}
        {{ last if last > new else new }}

automation:
  - id: '1655705659488'
    alias: 'Update max usage this month (and day)'
    description: ''
    trigger:
    - platform: time_pattern
      minutes: '59'
      seconds: '59'
    condition: []
    variables: 
      max3: >
        {% set max3 = states('input_text.max_3hour_month_usage') %}
        {{ ('[]' if (max3 == 'unknown' or states.input_text.max_3hour_month_usage.last_updated.month != now().month) else max3)|from_json }}
      maxtoday: >
        {% set maxtoday = states('input_number.today_max_usage')|float(default=0) if now().hour > 0 else 0 %}
        {% set this_hour = states('sensor.energiforbruk_time')|float(default=0) %}
        {{ ([ maxtoday , this_hour ]|sort(1))[0]|round(3) }}
    action:
    - service: input_number.set_value
      data: 
        value: >
          {{ maxtoday }}
      target: 
        entity_id: input_number.today_max_usage
    - choose: 
      - conditions:
        - condition: template
          value_template: "{{ now().hour == 23 }}"
        sequence: 
        - service: input_text.set_value
          data: 
            value: >
              {% set t = now() + timedelta(days=1) %}
              {{ (((max3 + [ maxtoday ])|sort(1))[:3] if t.month == now().month else [])|to_json }}
          target: 
            entity_id: input_text.max_3hour_month_usage
        - service: input_number.set_value
          data: 
            value: 0
          target: 
            entity_id: input_number.today_max_usage
      - conditions:
        - condition: template
          value_template: "{{ now().month != states.input_text.max_3hour_month_usage.last_updated.month }}"
        sequence: 
        - service: input_text.set_value
          data: 
            value: '[]'
          target: 
            entity_id: input_text.max_3hour_month_usage

  - id: '1655936457693'
    alias: 'Kill power users to get under energy_limit this hour'
    description: ''
    mode: single
    trigger:
    - platform: template
      value_template: >
        {% set energy_limit = states('sensor.rest_of_month_energy_limit')|int - 100 %}
        {{ (states('sensor.energy_this_hour_estimate')|float * 1000) >= energy_limit and 
            now().minute > 0 and now().minute % 15 == 0 }}
    condition: []
    action:
    - choose:
      - conditions:
        - condition: state
          entity_id: binary_sensor.easee_on
          state: 'on'
        sequence:
        - service: easee.set_charger_dynamic_limit
          data:
            charger_id: EH630897
            current: "{{ states('sensor.easee_current_limit') }}"
      - conditions:
        - condition: device
          type: is_on
          device_id: 864126853760387fb9a41a020cd087f1
          entity_id: switch.stikk_vv_kjeller
          domain: switch
        sequence:
        - type: turn_off
          device_id: 864126853760387fb9a41a020cd087f1
          entity_id: switch.stikk_vv_kjeller
          domain: switch
      - conditions:
        - condition: device
          type: is_on
          device_id: ced3fc17b42719e3af505c552f41c16a
          entity_id: switch.vv_tank
          domain: switch
        sequence:
        - type: turn_off
          device_id: ced3fc17b42719e3af505c552f41c16a
          entity_id: switch.vv_tank
          domain: switch
      default: []

