input_text: 
  max_3hour_month_usage:
    name: Max energy usage 3 hours this month
    max: 40

input_number:
  last_energy_reading:
    name: Energy reading last hour
    max: 200000
    min: 0
    unit_of_measurement: "kWh"

#sensor:
#- platform: integration
#  source: sensor.amshan_power_import
#  method: left
#  round: 2
#  unit_prefix: k
#  unit_time: h
    
template:
  sensor:
  - name: power_controlled
    unit_of_measurement: W
    device_class: power
    state: >
      {{ states('sensor.vv_tank_electric_consumption_w')|int(default=0)
         + states('sensor.vv_kjeller_power')|int(default=0)
         + states('sensor.shellyvask_power')|int(default=0)
         + states('sensor.torketrommel_power')|int(default=0)
         + states('sensor.easee_power')|int(default=0) }}
  - name: power_uncontrolled
    unit_of_measurement: W
    device_class: power
    state: >
      {% set uncontrolled =  states('sensor.power_usage')|int(default=0)
       - states('sensor.power_controlled')|int(default=0) %}
      {{ uncontrolled if uncontrolled > 0 else 0 }}
  - name: power_monitored
    unit_of_measurement: W
    device_class: power
    state: >
      {{ states('sensor.vpoppe_power')|int(default=0)
       + states('sensor.vpnede_power')|int(default=0)
       + states('sensor.kjoleskap_electric_consumption_w')|int(default=0)
       + states('sensor.inngangstikk_power')|int(default=0)
       + states('sensor.server_power')|int(default=0)
       + states('sensor.baderomsgulv_electric_consumption_w')|int(default=0)
       + states('sensor.shellyfrys_power_2')|int(default=0)
       + states('sensor.shellykjol_switch_0_power')|int(default=0)
       + states('sensor.adax_guest_power')|int(default=0)
       + states('sensor.adax_syrom_power')|int(default=0)
       + states('sensor.fa_adax_power')|int(default=0) }}
  - name: power_unmonitored
    unit_of_measurement: W
    device_class: power
    state: >
      {% set unmonitored =  states('sensor.power_uncontrolled')|int(default=0)
       - states('sensor.power_monitored')|int(default=0) %}
      {{ unmonitored if unmonitored > 0 else 0 }}
  - name: power_usage
    unit_of_measurement: W
    device_class: power
    state: >
      {{ states('sensor.amshan_power_import')|int(default=0)
         + states('sensor.pvlogger_power')|int(default=0)
         - states('sensor.amshan_power_export')|int(default=0) }}
  - unique_id: power_in_or_out
    unit_of_measurement: 'W'
    state: '{{ states.sensor.amshan_power_import.state|int -  states.sensor.amshan_power_export.state|int }}'
    attributes:
      friendly_name: 'Kraft forbrukt fra eller levert til nettet'
  - name: last_energy_reading
    unit_of_measurement: 'kWh'
    state: >
      {% set last_energy_reading = states('input_number.last_energy_reading') %}
      {{ last_energy_reading }}
  - name: energy_this_hour_estimate
    unit_of_measurement: 'kWh'
    state: >
      {% set this_hour = states('sensor.energy_this_hour_estimate') %}
      {% set last_energy_reading = states('input_number.last_energy_reading') %}
      {% set tdiff = now().timestamp() - states.input_number.last_energy_reading.last_updated.timestamp() %}
      {{ ((states.sensor.energiforbruk.state|float - last_energy_reading|float) * 3600 / tdiff)|round(3) if tdiff > 60 else this_hour }}
  - name: max_3hour_month_usage_average
    unit_of_measurement: 'kWh'
    state: >
      {% set max3 = states('input_text.max_3hour_month_usage')|from_json %}
      {% set this = states.sensor.energy_this_hour_estimate.state|float %}
      {% set max3 = ((max3 + [this])|sort(1))[:3] %}
      {% set v = namespace (sum=0) %}
      {% for i in range (max3|length) %}
      {%   set v.sum = v.sum + max3[i] %}
      {% endfor %}
      {{ (v.sum / max3|length)|round(3) }}
  - name: power_usage_by_subsides_and_maxpower
    state: >
      {% set ev_battery_pack = states.input_number.ev_battery_pack.state|int %}
      {% set ev_max_charge = states.input_number.ev_max_charge.state|int %}
      {% set ev_min_charge = states.input_number.ev_min_charge.state|int %}
      {% set ev_charge_steps = states.input_number.ev_charge_steps.state|int %}
      {% set ev_charge_efficiency = states.input_number.ev_charge_efficiency.state|float %}
      {% set hour = now().hour %}
      {% set tank_power = 2700 %}
      {% set kjeller_power = 1700 %}
      {% set energy_limit = 5000 %}
      {% set v = namespace (base=[], tank = [], kjeller = [], needed_charge = 0, easee = [], usage=[]) %}
      {% set uctrld = states.input_text.uncontrolled_estimate.state|from_json %}
      {% set pvguess = states.sensor.pv_guess_by_factor.state|from_json %}
      {% set prices = states.sensor.template_energy_by_subsides_and_production.attributes.prices %}
      {% set uctrld = uctrld + uctrld %}
      {% set pvguess = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0][:now().hour] + pvguess %}
      {% if pvguess|length > prices|length %}
      {% set pvguess = pvguess[:prices|length] %}
      {% endif %}
      {% for i in range (hour,pvguess|length) %}
      {% set v.base = v.base + [ {'hour': i, 'energy': uctrld[i] - pvguess[i], 'price': prices[i] }] %}
      {% endfor %}
      {% set v.base = v.base | sort(attribute='price') %}
      {% set hours = states.input_number.vvtank_hours.state|round(0) %}
      {% set done = as_datetime(states.input_datetime.vvtank_last_on.state).hour %}
      {% set done = done + 24 if done < hour else done  %}
      {% set done = 6 if done <= 6 
               else 16 if done <= 16 
               else done if done < 24 
               else 30 if done <= 30 
               else 40 %}
      {% set done = pvguess|length if done > pvguess|length else done %}
      {% for i in range (v.base|length) %}
      {% if v.base[i].hour < done 
            and v.tank|length < hours 
            and (v.base[i].energy + tank_power) < energy_limit 
            and not (v.base[i].hour == hour
                and states.binary_sensor.vvtank_on.state == 'off'
                and now().replace(minute=0, second=0) < states.switch.vv_tank.last_updated.replace(minute=59, second=59)) %}
      {% set v.base = v.base[:i] + [{'hour': v.base[i].hour, 'energy': v.base[i].energy + tank_power, 'price': v.base[i].price}] + v.base[i+1:] %}
      {% set v.tank = v.tank + [v.base[i].hour] %}
      {% endif %}
      {% endfor %}
      {% set hours = states.input_number.vvkjeller_hours.state|round(0) %}
      {% set done = as_datetime(states.input_datetime.vvkjeller_last_on.state).hour %}
      {% set done = done + 24 if done < hour else done  %}
      {% set done = 6 if done <= 6 else 16 if done <= 16 else done if done < 24 else 30 if done <= 30 else 40 %}
      {% set done = pvguess|length if done > pvguess|length else done %}
      {% for i in range (v.base|length) %}
      {% if v.base[i].hour < done 
            and v.kjeller|length < hours 
            and (v.base[i].energy + kjeller_power) < energy_limit
            and not (v.base[i].hour == hour 
                     and states.binary_sensor.vvkjeller_on.state == 'off'
                     and now().replace(minute=0, second=0) < states.switch.vv_kjeller.last_updated.replace(minute=59, second=59)) %}
      {% set v.base = v.base[:i] + [{'hour': v.base[i].hour, 'energy': v.base[i].energy + kjeller_power, 'price': v.base[i].price}] + v.base[i+1:] %}
      {% set v.kjeller = v.kjeller + [v.base[i].hour] %}
      {% endif %}
      {% endfor %}
      {% set v.needed_charge = ev_battery_pack * (1 - states.input_number.ladestatus.state|float/100) %}
      {% set done = states.input_datetime.car_ready_charged.attributes.hour %}
      {% set done = done + 24 if done < hour else done %}
      {% set done = pvguess|length if done > pvguess|length else done %}
      {% for i in range (v.base|length) %}
      {% if v.base[i].hour < done and v.needed_charge > 0 and (v.base[i].energy + ev_min_charge ) < energy_limit -%}
      {% set availible = ((energy_limit - v.base[i].energy) / ev_charge_steps)|int * ev_charge_steps -%}
      {% set availible = ev_max_charge if availible > ev_max_charge else availible %}
      {% set v.needed_charge = v.needed_charge - (availible * ev_charge_efficiency/100)|int %}
      {% set v.base = v.base[:i] + [{'hour': v.base[i].hour, 'energy': v.base[i].energy + availible, 'price': v.base[i].price}] + v.base[i+1:] %}
      {% set v.easee = v.easee + [ v.base[i].hour ] %}
      {% endif %}
      {% endfor %}

      {{ {'vvtank': v.tank|sort,
          'vvkjeller': v.kjeller|sort,
          'easee': v.easee|sort}|to_json }}


automation:
  - id: '1655705659488'
    alias: 'Update max usage this month'
    description: ''
    trigger:
    - platform: time_pattern
      minutes: '59'
      seconds: '59'
    condition: []
    variables: 
      saved: '{{ states(''input_number.last_energy_reading'')|float(default=0) }}'
      asofnow: '{{ states(''sensor.energiforbruk'')|float(default=0) }}'
      max3: >
        {% set max3 = states('input_text.max_3hour_month_usage') %}
        {{ ('[]' if (max3 == 'unknown' or states.input_text.max_3hour_month_usage.last_updated.month != now().month) else max3)|from_json }}
    action:
    - service: input_number.set_value
      data: 
        value: '{{ asofnow }}'
      target: 
        entity_id: input_number.last_energy_reading
    - service: input_text.set_value
      data: 
        value: >
          {{ (((max3 + [ (asofnow - saved)|round(3)])|sort(1))[:3])|to_json}}
      target: 
        entity_id: input_text.max_3hour_month_usage

  - id: '1655936457693'
    alias: 'Kill power users to get under 5k this hour'
    description: ''
    mode: single
    trigger:
    - platform: template
      value_template: >-
        {{ (states.sensor.energy_this_hour_estimate.state|float * 1000) > 5000 and
        now().minute > 0 and now().minute % 15 == 0 }}
    condition: []
    action:
    - choose:
      - conditions:
        - condition: state
          entity_id: binary_sensor.easee_on
          state: 'true'
        sequence:
        - service: easee.pause
          data:
            charger_id: EH630897
      - conditions:
        - condition: device
          type: is_on
          device_id: 763c89891d0a0a6a02ad92f3e1cedc45
          entity_id: switch.vv_kjeller
          domain: switch
        sequence:
        - type: turn_off
          device_id: 763c89891d0a0a6a02ad92f3e1cedc45
          entity_id: switch.vv_kjeller
          domain: switch
      - conditions:
        - condition: device
          type: is_on
          device_id: ced3fc17b42719e3af505c552f41c16a
          entity_id: switch.vv_tank
          domain: switch
        sequence:
        - type: turn_off
          device_id: ced3fc17b42719e3af505c552f41c16a
          entity_id: switch.vv_tank
          domain: switch
      default: []

