input_number:
  vvtank_hours: 
    name: Hours needed to get vvtank fully heated in 24 hours
    min: 0
    max: 10
    step: 0.1
    unit_of_measurement: "Hours"
    mode: box
  vvkjeller_hours: 
    name: Hours needed to get vvkjeller fully heated in 24 hours
    min: 0
    max: 5
    step: 0.1
    unit_of_measurement: "Hours"
    mode: box

template:
  - sensor: 
    - name: hours24_vvtank
      unit_of_measurement: "Hours"
      state: >
        {% set hours = states.input_number.vvtank_hours.state|float %}
        {% if states.binary_sensor.vvtank_on.state == 'on' %}
        {% set now = (now().timestamp() - states.binary_sensor.vvtank_on.last_updated.timestamp())/3600 %}
        {% set hours = (hours - now)|round(1) if hours > now else 0.1 %}
        {% endif %}
        {{ hours|round(2) }}
    - name: hours24_vvkjeller
      unit_of_measurement: "Hours"
      state: >
        {% set hours = states.input_number.vvkjeller_hours.state|float %}
        {% if states.binary_sensor.vvkjeller_on.state == 'on' %}
        {% set now = (now().timestamp() - states.binary_sensor.vvkjeller_on.last_updated.timestamp())/3600 %}
        {% set hours = (hours - now)|round(1) if hours > now else 0.1 %}
        {% endif %}
        {{ hours|round(2) }}
    - name: vvtank_last_on
      state: '{{ states.input_datetime.vvtank_last_on.state[:16] }}'
    - name: vvkjeller_last_on
      state: '{{ states.input_datetime.vvkjeller_last_on.state[:16] }}'
    - name: vvtank_hours
      state: >
        {% set by_subsides = states.sensor.power_usage_by_subsides_and_maxpower.state|from_json %}
        {{ by_subsides.vvtank|sort }}
    - name: vvkjeller_hours
      state: >
        {% set by_subsides = states.sensor.power_usage_by_subsides_and_maxpower.state|from_json %}
        {{ by_subsides.vvkjeller|sort }}
    
automation:
  - id: '1658529461779'
    alias: VV Tank on or off by hours
    trigger: 
    - platform: template
      value_template: >
        {% set hours = (states('sensor.power_usage_by_subsides_and_maxpower')|from_json).vvtank %}
        {% set last =  as_local(states.binary_sensor.vvtank_on.last_updated) %}
        {{ false if (last.hour == now().hour and last.day == now().day) or now().minute == 59
           else hours|length == 0 or hours[0] == now().hour or (hours|length > 1 and hours[1] == now().hour)
        }}
      id: turnon
    - platform: template
      value_template: >
        {% set hours = (states('sensor.power_usage_by_subsides_and_maxpower')|from_json).vvtank %}
        {% set last = as_datetime(states('input_datetime.vvtank_last_on')) %}
        {{ true if (last.hour == now().hour and last.day == now().day) 
           else hours|length != 0 and hours[0] != now().hour and (hours|length <= 1 or hours[1] != now().hour)
        }}
      id: turnoff
    action:
    - choose: 
      - conditions:
        - condition: trigger
          id: turnon
        sequence: 
        - type: turn_on
          device_id: ced3fc17b42719e3af505c552f41c16a
          entity_id: switch.vv_tank
          domain: switch
      default:
      - type: turn_off
        device_id: ced3fc17b42719e3af505c552f41c16a
        entity_id: switch.vv_tank
        domain: switch

  - id: '1658955764652'
    alias: VV Tank hours update
    description: ''
    trigger:
    - platform: state
      entity_id: sensor.vvtank_hours
    - platform: template
      value_template: >
        {{ states('sensor.lowest_humidity_at_bathrom_last_15_minutes') != 'unknown'
           and states('sensor.lumi_bad_humidity')|int(default=50) > 
           states('sensor.lowest_humidity_at_bathrom_last_15_minutes')|int(default=50) + 15 }}
      id: humidity_high
    - platform: state
      entity_id: binary_sensor.vvtank_on
      from: 'on'
      to: 'off'
      id: vvtank_off
    - platform: template
      value_template: >
        {{ states.switch.vv_tank.state == 'on' 
           and states.binary_sensor.vvtank_on.state == 'off' 
           and now().timestamp() - states.switch.vv_tank.last_updated.timestamp() > 300 }}
      id: vvtank_not_starting
    condition: 
    - condition: template
      value_template: '{{ states.automation.vv_tank_hours_update.attributes.current == 0}}'
    action:
    - choose:
      - conditions:
        - condition: template
          value_template: >
            {{ states.binary_sensor.vvtank_on.state == 'on' 
              and states.sensor.hours24_vvtank.state|float > 1
              and as_local(states.binary_sensor.vvtank_on.last_updated).hour != now().hour }}
        sequence:
        - service: input_number.set_value
          data: 
            value: >
              {% set on = states.binary_sensor.vvtank_on.last_updated.timestamp() %}
              {% set hour = states.input_number.vvtank_hours.last_updated.timestamp() %}
              {% set last =  on if on > hour else hour %}
              {{ (states.input_number.vvtank_hours.state|float - 
                (now().timestamp() - last)/3600)|round(1) }}
          target:
            entity_id: input_number.vvtank_hours
    - choose:
      - conditions:
        - condition: trigger
          id: humidity_high
        sequence:
        - service: input_number.set_value
          data:
            value: '{{ (states.input_number.vvtank_hours.state|float + 0.7)|round(2) }}'
          target:
            entity_id: input_number.vvtank_hours
      - conditions:
        - or: 
            - condition: trigger
              id: vvtank_off
            - condition: trigger
              id: vvtank_not_starting
        sequence:
        - choose:
          - conditions:
            - condition: template
              value_template: "{{ states.switch.vv_tank.state == 'on' }}"
            sequence:
            - service: input_number.set_value
              data:
                value: 2.2
              target:
                entity_id: input_number.vvtank_hours
            - service: input_datetime.set_datetime
              data:
                timestamp: '{{ now().timestamp() }}'
              target:
                entity_id: input_datetime.vvtank_last_on
          default:
          - service: input_number.set_value
            data:
              value: >
                {% set trigger_from = trigger.from_state.last_updated.timestamp() %}
                {% set hour = states.input_number.vvtank_hours.last_updated.timestamp() %}
                {% set last = trigger_from if trigger_from > hour else hour %}
                {% set new = states.input_number.vvtank_hours.state|float - (trigger.to_state.last_updated.timestamp() - last)/3600 %}
                {{ 0.6 if new < 0.6 and states.binary_sensor.vvtank_on.state == 'on' else new }}
            target:
              entity_id: input_number.vvtank_hours
      default: []
    mode: single

  - id: '1652881309414'
    alias: vvtank_on update
    description: ''
    trigger:
    - platform: template
      value_template: >
        {{ states.binary_sensor.vvtank_on.state == 'on' 
           and states.switch.vv_tank.state == 'off'
          and now().timestamp() - states.switch.vv_tank.last_updated.timestamp() > 30 }}
    condition: []
    action:
    - service: notify.persistent_notification
      data:
        message: vvtank_on ser ut til å henge
        title: 'vvtank debug '
    - service: homeassistant.update_entity
      data: {}
      target:
        entity_id: sensor.vv_tank_electric_consumption_w
    - delay:
        hours: 0
        minutes: 1
        seconds: 0
        milliseconds: 0
    - condition: template
      value_template: >
        {{ states.switch.vv_tank.state == 'off' and states.binary_sensor.vvtank_on.state == 'on' }}
    - service: notify.persistent_notification
      data:
        message: vvtank_on ser fortsatt ut til å henge litt
        title: 'vvtank debug '
    mode: single

  - id: '1658959948857'
    alias: VV Kjeller on or off by hours
    trigger: 
    - platform: template
      value_template: >
        {% set hours = (states('sensor.power_usage_by_subsides_and_maxpower')|from_json).vvkjeller %}
        {% set last =  as_local(states.binary_sensor.vvkjeller_on.last_updated) %}
        {{ false if (last.hour == now().hour and last.day == now().day) or now().minute == 59 or (now().minute == 0 and now().second < 30)
           else hours|length == 0 or hours[0] == now().hour or (hours|length > 1 and hours[1] == now().hour)
        }}
      id: turnon
    - platform: template
      value_template: >
        {% set hours = (states('sensor.power_usage_by_subsides_and_maxpower')|from_json).vvkjeller %}
        {% set last = as_datetime(states('input_datetime.vvkjeller_last_on')) %}
        {{ true if (last.hour == now().hour and last.day == now().day) 
           else hours|length != 0 and hours[0] != now().hour and (hours|length <= 1 or hours[1] != now().hour)
        }}
      id: turnoff
    action:
    - choose: 
      - conditions:
        - condition: trigger
          id: turnon
        sequence: 
        - type: turn_on
          device_id: 763c89891d0a0a6a02ad92f3e1cedc45
          entity_id: switch.vv_kjeller
          domain: switch
      default:
      - type: turn_off
        device_id: 763c89891d0a0a6a02ad92f3e1cedc45
        entity_id: switch.vv_kjeller
        domain: switch

  - id: '1658960346745'
    alias: VV Kjeller hours update
    description: ''
    trigger:
    - platform: state
      entity_id: sensor.vvkjeller_hours
    - platform: template
      value_template: >
        {{ states('sensor.lowest_humidity_at_bathrom_downstairs_last_15_minutes') != 'unknown'
           and states('sensor.lumi_bad_nede_humidity')|int(default=50) > 
           states('sensor.lowest_humidity_at_bathrom_downstairs_last_15_minutes')|int(default=50) + 15 }}
      id: humidity_downstairs_high
    - platform: state
      entity_id: binary_sensor.vvkjeller_on
      from: 'on'
      to: 'off'
      id: vvkjeller_off
    - platform: template
      value_template: >
        {{ states.switch.vv_kjeller.state == 'on' 
           and states.binary_sensor.vvkjeller_on.state == 'off' 
           and now().timestamp() - states.switch.vv_kjeller.last_updated.timestamp() > 300 }}
      id: vvkjeller_not_starting
    condition: 
    - condition: template
      value_template: '{{ states.automation.vv_kjeller_hours_update.attributes.current == 0}}'
    action:
    - choose:
      - conditions:
        - condition: template
          value_template: >
            {{ states.binary_sensor.vvkjeller_on.state == 'on' 
              and states.sensor.hours24_vvkjeller.state|float > 1
              and as_local(states.binary_sensor.vvkjeller_on.last_updated).hour != now().hour }}
        sequence:
        - service: input_number.set_value
          data: 
            value: >
              {% set on = states.binary_sensor.vvkjeller_on.last_updated.timestamp() %}
              {% set hour = states.input_number.vvkjeller_hours.last_updated.timestamp() %}
              {% set last =  on if on > hour else hour %}
              {{ (states.input_number.vvkjeller_hours.state|float - 
                (now().timestamp() - last)/3600)|round(1) }}
          target:
            entity_id: input_number.vvkjeller_hours
    - choose:
      - conditions:
        - condition: trigger
          id: humidity_downstairs_high
        sequence:
        - service: input_number.set_value
          data:
            value: '{{ (states.input_number.vvkjeller_hours.state|float + 0.7)|round(2)  }}'
          target:
            entity_id: input_number.vvkjeller_hours
      - conditions:
        - or: 
            - condition: trigger
              id: vvkjeller_off
            - condition: trigger
              id: vvkjeller_not_starting
        sequence:
        - choose:
          - conditions:
            - condition: template
              value_template: "{{ states.switch.vv_kjeller.state == 'on' }}"
            sequence:
            - service: input_number.set_value
              data:
                value: 1.1
              target:
                entity_id: input_number.vvkjeller_hours
            - service: input_datetime.set_datetime
              data:
                timestamp: '{{ now().timestamp() }}'
              target:
                entity_id: input_datetime.vvkjeller_last_on
          default:
          - service: input_number.set_value
            data:
              value: >
                {% set trigger_from = trigger.from_state.last_updated.timestamp() %}
                {% set hour = states.input_number.vvkjeller_hours.last_updated.timestamp() %}
                {% set last = trigger_from if trigger_from > hour else hour %}
                {% set new = states.input_number.vvkjeller_hours.state|float - (trigger.to_state.last_updated.timestamp() - last)/3600 %}
                {{ 0.6 if new < 0.6 and states.binary_sensor.vvkjeller_on.state == 'on' else new }}
            target:
              entity_id: input_number.vvkjeller_hours
      default: []
    mode: single

