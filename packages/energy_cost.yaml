input_number:
  energy_raw_month_average:
    name: Cached calculated average cost NOK/kWh
    max: 100
    min: 0
    step: 0.00001
    unit_of_measurement: "NOK/kWh"
    mode: box


utility_meter:
  easee_cost_monthly:
    source: sensor.easee_cost_hourly
    cycle: monthly
  energy_cost_monthly:
    source: sensor.energy_cost_hourly
    cycle: monthly
  energy_sold_monthly: 
    source: sensor.energy_sold_hourly
    cycle: monthly
  energy_subsides_monthly: 
    source: sensor.energy_subsides_hourly
    cycle: monthly
  grid_cost_monthly:
    source: sensor.grid_cost_hourly
    cycle: monthly

template:
  sensor:
    - name: los_cost
      unit_of_measurement: "NOK"
      state: >
        {% set all_usage = states('sensor.energy_usage_month')|float %}
         {{ (9 + (states('sensor.energy_cost_monthly')|float * 1.25 + 0.0345 * all_usage) - 
             states('sensor.energy_sold_monthly')|float)|round(2) }}
    - name: vibb_cost
      unit_of_measurement: "NOK"
      state: >
        {% set all_usage = states('sensor.energy_usage_month')|float %}
        {{ (states('sensor.energy_cost_monthly')|float * 1.25 
            - states('sensor.energy_sold_monthly')|float)|round(2) }}
    - name: grid_cost
      unit_of_measurement: "NOK"
      state: >
        {% set all_usage = states('sensor.energy_usage_month')|float %}
        {{ (states('sensor.kapasitetstrinn')|float
            + states('sensor.grid_cost_monthly')|float
            - states('sensor.grid_reward_monthly')|float
            - states('sensor.energy_subsides') |float * all_usage)|round(2) }}
    - name: monthly_subsides
      unit_of_measurement: "NOK"
      state: >
        {% set all_usage = states('sensor.energy_usage_month')|float %}
        {{ (states('sensor.energy_subsides') |float * all_usage)|round(2) }}
    - name: kapasitetstrinn
      unit_of_measurement: "NOK"
      state: >
        {% set limit = states('input_select.energy_month_limit')|int %}
        {{ 155 if limit <= 2000 else
           195 if limit <= 5000 else
           335 if limit <= 10000 else
           690 if limit <= 15000 else
           900 }}
    - name: easee_cost_hourly
      unit_of_measurement: "NOK"
      state: >
        {{ (states('sensor.energy_raw_nok_kwh')|float * 
           states('sensor.easee_usage_hourly')|float(0))|round(4) }}
    - name: energy_cost_hourly
      unit_of_measurement: "NOK"
      state: >
        {{ (states('sensor.energy_raw_nok_kwh')|float * 
           states('sensor.energiforbruk_time')|float(0))|round(2) }}
    - name: energy_subsides_hourly
      unit_of_measurement: "NOK"
      state: >
        {{ (states('sensor.energy_subsides_nok_kwh')|float * 
           states('sensor.energiforbruk_time')|float(0))|round(2) }}
    - name: energy_sold_hourly
      unit_of_measurement: "NOK"
      state: >
        {{ (states('sensor.energy_raw_nok_kwh')|float * 
           states('sensor.energiproduksjon_time')|float(0))|round(2) }}
    - name: grid_cost_hourly
      unit_of_measurement: "NOK"
      state: >
        {{ (states('sensor.template_grid_charge')|float * 
           states('sensor.energiforbruk_time')|float(0))|round(2) }}
    - name: grid_reward_monthly
      unit_of_measurement: "NOK"
      state: >
        {{ (0.04 * states('sensor.energy_production_month')|float(0))|round(2) }}
    - name: energy_subsides
      unit_of_measurement: 'NOK/kWh'
      state: "{{ states('sensor.nordpool_subsides') }}"
    - unique_id: energy_by_subsides_and_production
      unit_of_measurement: 'NOK/kWh'
      state: >
        {% set pv_guess = states.sensor.forecast_solar_48h.state|from_json %}
        {% set uncontrolled = states.input_text.uncontrolled_estimate.state|from_json %}
        {% set h = now().hour %}
        {% set subsides = (states('sensor.subsides_today_nok_kwh')|from_json)[h] %}
        {% set energy_price = (states('sensor.energy_today_nok_kwh')|from_json)[h] %}
        {% set price_to_grid = (states('sensor.to_grid_today_nok_kwh')|from_json)[h] %}
        {{ price_to_grid if (pv_guess[0] - uncontrolled[h]) > 0 else (energy_price - subsides)|round(4) }}
      attributes:
        friendly_name: "Energycost @ rypeveien"
        prices: >
          {% set pv_guess = states.sensor.forecast_solar_48h.state|from_json %}
          {% set subsides = states('sensor.subsides_today_nok_kwh')|from_json %}
          {% set subsides = subsides + states('sensor.subsides_tomorrow_nok_kwh')|from_json %}
          {% set uncontrolled = states.input_text.uncontrolled_estimate.state|from_json %}
          {% set energy_price = states('sensor.energy_today_nok_kwh')|from_json +
                                states('sensor.energy_tomorrow_nok_kwh')|from_json %}
          {% set price_to_grid = states('sensor.to_grid_today_nok_kwh')|from_json +
                                 states('sensor.to_grid_tomorrow_nok_kwh')|from_json %}
          {% set delivered = states.input_text.delivered_grid_today.state|from_json %}
          {% set uncontrolled = uncontrolled + uncontrolled %}
          {% set var = namespace ( price = [] ) %}
          {% for i in range(energy_price|length) %}
            {% set var.price = var.price + [
                price_to_grid[i] if (i < delivered|length and delivered[i]|float > 0) or 
                 ( i >= delivered|length and (pv_guess[i] - uncontrolled[i]) > 0) else
                (energy_price[i] - subsides[i])|round(4) ] %} 
          {% endfor %}
          {{ var.price|to_json }}
        solar: >
          {% set pv_guess = states.sensor.forecast_solar_48h.state|from_json %}
          {% set uncontrolled = states.input_text.uncontrolled_estimate.state|from_json %}
          {% set price_to_grid = states('sensor.to_grid_today_nok_kwh')|from_json +
                                 states('sensor.to_grid_tomorrow_nok_kwh')|from_json %}
          {% set delivered = states.input_text.delivered_grid_today.state|from_json %}
          {% set uncontrolled = uncontrolled + uncontrolled %}
          {% set var = namespace ( price = [] ) %}
          {% for i in range(price_to_grid|length) %}
            {% set var.price = var.price + [
                price_to_grid[i] if (i < delivered|length and delivered[i]|float > 0) or 
                 ( i >= delivered|length and (pv_guess[i] - uncontrolled[i]) > 0) else 0 ] %}
          {% endfor %}
          {{ var.price|to_json }}
        subsides: >
          {% set pv_guess = states.sensor.forecast_solar_48h.state|from_json %}
          {% set uncontrolled = states.input_text.uncontrolled_estimate.state|from_json %}
          {% set subsides = states('sensor.subsides_today_nok_kwh')|from_json +
                            states('sensor.subsides_tomorrow_nok_kwh')|from_json %}
          {% set energy_price = states('sensor.energy_today_nok_kwh')|from_json +
                                states('sensor.energy_tomorrow_nok_kwh')|from_json %}
          {% set delivered = states.input_text.delivered_grid_today.state|from_json %}
          {% set uncontrolled = uncontrolled + uncontrolled %}
          {% set var = namespace ( price = [] ) %}
          {% for i in range(energy_price|length) %}
            {% set var.price = var.price + [
                0 if (i < delivered|length and delivered[i]|float > 0) or 
                 ( i >= delivered|length and (pv_guess[i] - uncontrolled[i]) > 0) else
                (energy_price[i] - subsides[i])|round(4) ] %} 
          {% endfor %}
          {{ var.price|to_json }}
        analyzer: >
          {% set v = namespace(priceanalyze = [], prices_with_floor = []) %}
          {% set prices =
             state_attr('sensor.template_energy_by_subsides_and_production','prices') %}
          {% set floor = prices|min + 0.00001 if prices|min <= 0 else 0 %}
          {% for hour in range(prices|length) %}
          {% set v.prices_with_floor = v.prices_with_floor + [prices[hour] - floor ] %}
          {% endfor %}
          {% set prices = v.prices_with_floor %}
          {% set diff = (prices|min / prices|max) - 1 %}
          {% set p_threshold = (diff / 4) * -1 %}
          {% set gp_threshold = 1 - p_threshold %}
          {% set fp_threshold = 1 + p_threshold %}
          {% for hour in range(prices|length) %}
          {% set gaining = prices[hour]/max(prices[hour:hour+3]) < gp_threshold %}
          {% set falling = prices[hour]/min(prices[hour:hour+4]) > fp_threshold %}
          {% set ret = -1 if hour > (prices|length - 1) and (prices[hour + 1] / prices[hour]) < 0.8
                      else -1 if prices[hour] >= max(prices)
                      else 1 if prices[hour] <= min(prices)
                      else -1 if hour < prices|length - 1 and prices[hour+1] / prices[hour] < 0.60
                      else 1 if gaining and prices[hour] < (prices|sort(1))[4]
                      else -1 if falling and prices[hour] > average(prices)
                      else 0 if prices[hour] <= (prices|sort(0))[9] and (not gaining or falling)
                      else 0 %}
          {% set v.priceanalyze = v.priceanalyze + [ret] %}
          {% endfor %}
          {{ v.priceanalyze |to_json }}

    - unique_id: grid_charge_rates
      state: >
        {{ { "night": 0.35,
             "day": 0.47,
             "delivery": -0.04}|to_json if now().month < 10 else 
            { "night": 0.38,
             "day": 0.50,
             "delivery": -0.04}|to_json }}
      attributes:
        friendly_name: "Grid charge rates"
    - unique_id: grid_charge
      unit_of_measurement: 'NOK/kWh'
      state: >
        {% set charge = states.sensor.template_grid_charge_rates.state|from_json %}
        {{ charge.day if now().hour >= 6 and now().hour < 22 else
           charge.night }}
      attributes:
        friendly_name: "Grid charge by hours"
        prices: >
          {% set charge = states.sensor.template_grid_charge_rates.state|from_json %}
          {% set var = namespace ( charge = [] ) %}
          {% for h in range(48) %}
            {% set check = now() + timedelta (hours=h - now().hour) %}
            {% set var.charge = var.charge + [ charge.day if check.hour >= 6 and check.hour < 22 else
                                               charge.night ] %}
          {% endfor %}
          {{ var.charge|to_json }}
    - name: analyzer_updown
      state: "{{ state_attr('sensor.template_energy_by_subsides_and_production', 'analyzer')[now().hour] }}"
    - name: energy_raw_nok_kwh
      unit_of_measurement: 'NOK/kWh'
      state: >
        {% set nordpool = states('sensor.nordpool_today') %}
        {% set prices = nordpool|from_json if nordpool not in ['unknown', 'unavailable', '[]'] else 'unknown' %}  
        {{ prices[now().hour] if prices != 'unknown' else 'unknown' }}
    - name: energy_subsides_nok_kwh
      unit_of_measurement: 'NOK/kWh'
      state: >
        {% set nordpool = states('sensor.nordpool_today') %}
        {% set prices = nordpool|from_json if nordpool not in ['unknown', 'unavailable', '[]'] else 'unknown' %}  
        {{ 'unknown' if prices == 'unknown' else 
            0 if prices[now().hour] <= 0.7 else 
            ((prices[now().hour] - 0.7) * 0.9 * 1.25)|round(4) }}
    - name: energy_today_nok_kwh
      state: >
        {% set prices = namespace(list=[]) %}
        {% set nordpool = states('sensor.nordpool_today') %}
        {% set priceInfo = nordpool|from_json if nordpool not in ['unknown', 'unavailable', '[]'] else [] %}  
        {% for i in range(priceInfo|length) %}
          {% set prices.list = prices.list + [(priceInfo[i] * 1.25 + state_attr('sensor.template_grid_charge', 'prices')[i]|float)|round(3)] %}
        {% endfor %}
        {{ prices.list|to_json }}
    - name: subsides_today_nok_kwh
      state: >
        {% set subsides = namespace(list=[]) %}
        {% set nordpool = states('sensor.nordpool_today') %}
        {% set priceInfo = nordpool|from_json if nordpool not in ['unknown', 'unavailable', '[]'] else [] %}  
        {% for i in range(priceInfo|length) %}
          {% set subsides.list = subsides.list + [0 if priceInfo[i] <= 0.7 else ((priceInfo[i] - 0.7) * 0.9 * 1.25)|round(4)] %}
        {% endfor %}
        {{ subsides.list|to_json }}
    - name: to_grid_today_nok_kwh
      state: >
        {% set prices = namespace(list=[]) %}
        {% set nordpool = states('sensor.nordpool_today') %}
        {% set priceInfo = nordpool|from_json if nordpool not in ['unknown', 'unavailable', '[]'] else [] %}  
        {% for i in range(priceInfo|length) %}
          {% set prices.list = prices.list + [(priceInfo[i] + 0.04)|round(3)] %}
        {% endfor %}
        {{ prices.list|to_json }}
    - name: energy_raw_today_average_nok_kwh
      unit_of_measurement: "NOK/kWh"
      state: >
        {% set prices = namespace(sum=0) %}
        {% set nordpool = states('sensor.nordpool_today') %}
        {% set priceInfo = nordpool|from_json if nordpool not in ['unknown', 'unavailable', '[]'] else [] %}  
        {% for i in range(priceInfo|length) %}
          {% set prices.sum = prices.sum + priceInfo[i] %}
        {% endfor %}
        {{ (prices.sum / priceInfo|length)|round(5) }}
    - name: analyzer
      state: '{{ states.sensor.template_energy_by_subsides_and_production.attributes.analyzer }}'
    - name: energy_today_average_nok_kwh
      unit_of_measurement: "NOK/kWh"
      state: >
        {% set prices = namespace(sum=0) %}
        {% set nordpool = states('sensor.nordpool_today') %}
        {% set priceInfo = nordpool|from_json if nordpool not in ['unknown', 'unavailable', '[]'] else [] %}  
        {% for i in range(priceInfo|length) %}
          {% set prices.sum = prices.sum + (priceInfo[i] * 1.25 + 0.01 + state_attr('sensor.template_grid_charge', 'prices')[i]|float)|round(3) %}
        {% endfor %}
        {{ (prices.sum / priceInfo|length)|round(3) }}
    - name: energy_tomorrow_nok_kwh
      state: >
        {% set prices = namespace(list=[]) %}
        {% set nordpool = states('sensor.nordpool_tomorrow') %}
        {% set priceInfo = nordpool|from_json if nordpool not in ['unknown', 'unavailable', '[]'] else [] %}  
        {% for i in range(priceInfo|length) %}
          {% set prices.list = prices.list + [(priceInfo[i] * 1.25 + 0.01 + state_attr('sensor.template_grid_charge', 'prices')[i+24]|float)|round(3)] %}
        {% endfor %}
        {{ prices.list|to_json }}
    - name: subsides_tomorrow_nok_kwh
      state: >
        {% set subsides = namespace(list=[]) %}
        {% set nordpool = states('sensor.nordpool_tomorrow') %}
        {% set priceInfo = nordpool|from_json if nordpool not in ['unknown', 'unavailable', '[]'] else [] %}  
        {% for i in range(priceInfo|length) %}
          {% set subsides.list = subsides.list + [0 if priceInfo[i] <= 0.7 else ((priceInfo[i] - 0.7) * 0.9 * 1.25)|round(4)] %}
        {% endfor %}
        {{ subsides.list|to_json }}
    - name: to_grid_tomorrow_nok_kwh
      state: >
        {% set prices = namespace(list=[]) %}
        {% set nordpool = states('sensor.nordpool_tomorrow') %}
        {% set priceInfo = nordpool|from_json if nordpool not in ['unknown', 'unavailable', '[]'] else [] %}  
        {% for i in range(priceInfo|length) %}
          {% set prices.list = prices.list + [(priceInfo[i] + 0.04)|round(3)] %}
        {% endfor %}
        {{ prices.list|to_json }}
    - name: energy_tomorrow_average_nok_kwh
      unit_of_measurement: "NOK/kWh"
      state: >
        {% set prices = namespace(sum=0) %}
        {% set nordpool = states('sensor.nordpool_tomorrow') %}
        {% set priceInfo = nordpool|from_json if nordpool not in ['unknown', 'unavailable', '[]'] else [] %}  
        {% for i in range(priceInfo|length) %}
          {% set prices.sum = prices.sum + (priceInfo[i] * 1.25 + 0.01 + state_attr('sensor.template_grid_charge', 'prices')[i+24]|float)|round(3) %}
        {% endfor %}
        {{ (prices.sum / priceInfo|length)|round(3) }}
    - name: energy_all_nok_kwh
      unit_of_measurement: "NOK/kWh"
      state: '{{ (states.sensor.energy_today_nok_kwh.state|from_json)[now().hour] }}'
      attributes:
        prices: >
          {{ (states.sensor.energy_today_nok_kwh.state|from_json + 
              states.sensor.energy_tomorrow_nok_kwh.state|from_json)|to_json }}

