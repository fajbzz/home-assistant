input_text:
  tibber_today: 
    name: Tibber price today
    max: 200
  tibber_tomorrow: 
    name: Tibber price tomorrow
    max: 200
  tibber_month_average:
    name: Tibber average month price
    max: 255

input_number:
  energy_raw_month_average:
    name: Cached calculated average cost NOK/kWh
    max: 100
    min: 0
    step: 0.00001
    unit_of_measurement: "NOK/kWh"
    mode: box


rest: 
  - resource: "https://api.tibber.com/v1-beta/gql"
    scan_interval: 86400
    method: POST
    payload: '{"query": "{ viewer { homes { currentSubscription { priceInfo { current { energy } today { energy startsAt } tomorrow { energy startsAt }} } } } }"}'
    headers: 
      Authorization: !secret tibberAuthorization
      Content-Type: application/json 
    sensor:
      - name: tibber_rest
        value_template: 'OK'
        json_attributes_path: $.data.viewer.homes.0.currentSubscription.priceInfo
        json_attributes: 
          - "today"
          - "tomorrow"

utility_meter:
  easee_cost_monthly:
    source: sensor.easee_cost_hourly
    cycle: monthly
  energy_cost_monthly:
    source: sensor.energy_cost_hourly
    cycle: monthly
  energy_sold_monthly: 
    source: sensor.energy_sold_hourly
    cycle: monthly
  grid_cost_monthly:
    source: sensor.grid_cost_hourly
    cycle: monthly

template:
  sensor:
    - name: tibber_cost
      unit_of_measurement: "NOK"
      state: >
        {% set easee_usage = states('sensor.easee_usage_monthly')|float %}
        {% set all_usage = states('sensor.energy_usage_month')|float %}
        {% set non_easee_usage = all_usage - easee_usage %}
        {% set easee_cost = states('sensor.easee_cost_monthly')|float * 1.25 + 0.01 * all_usage %}
        {% set all_cost = states('sensor.energy_cost_monthly')|float * 1.25 + 0.01 * easee_usage %}
        {% set non_easee_cost = all_cost - easee_cost %}
        {% set non_easee_nok_kwh = non_easee_cost / non_easee_usage %}
        {% set easee_nok_kwh = easee_cost / easee_usage %}
        {% set easee_nok_kwh = easee_nok_kwh if easee_nok_kwh <= non_easee_nok_kwh * 0.8
                          else non_easee_nok_kwh * 0.8 %}
        {% set all_energy_cost = non_easee_cost + easee_usage * easee_nok_kwh %}
        {{ (39 + all_energy_cost - states('sensor.energy_sold_monthly')|float)|round(2) }}
    - name: los_cost
      unit_of_measurement: "NOK"
      state: >
        {% set all_usage = states('sensor.energy_usage_month')|float %}
         {{ (9 + (states('sensor.energy_cost_monthly')|float * 1.25 + 0.0345 * all_usage) * 0.98
                - states('sensor.energy_sold_monthly')|float)|round(2) }}
    - name: grid_cost
      unit_of_measurement: "NOK"
      state: >
        {% set all_usage = states('sensor.energy_usage_month')|float %}
        {{ (states('sensor.kapasitetstrinn')|float
            + states('sensor.grid_cost_monthly')|float
            - states('sensor.grid_reward_monthly')|float
            - states('sensor.energy_subsides') |float * all_usage)|round(2) }}
    - name: monthly_subsides
      unit_of_measurement: "NOK"
      state: >
        {% set all_usage = states('sensor.energy_usage_month')|float %}
        {{ (states('sensor.energy_subsides') |float * all_usage)|round(2) }}
    - name: kapasitetstrinn
      unit_of_measurement: "NOK"
      state: >
        {% set limit = states('input_select.energy_month_limit')|int %}
        {{ 245 if limit <= 2000 else
           315 if limit <= 5000 else
           440 if limit <= 10000 else
           815 if limit <= 15000 else
           1500 }}
    - name: easee_cost_hourly
      unit_of_measurement: "NOK"
      state: >
        {{ (states('sensor.energy_raw_nok_kwh')|float * 
           states('sensor.easee_usage_hourly')|float(0))|round(4) }}
    - name: energy_cost_hourly
      unit_of_measurement: "NOK"
      state: >
        {{ (states('sensor.energy_raw_nok_kwh')|float * 
           states('sensor.energiforbruk_time')|float(0))|round(2) }}
    - name: energy_sold_hourly
      unit_of_measurement: "NOK"
      state: >
        {{ (states('sensor.energy_raw_nok_kwh')|float * 
           states('sensor.energiproduksjon_time')|float(0))|round(2) }}
    - name: grid_cost_hourly
      unit_of_measurement: "NOK"
      state: >
        {{ (states('sensor.template_grid_charge')|float * 
           states('sensor.energiforbruk_time')|float(0))|round(2) }}
    - name: grid_reward_monthly
      unit_of_measurement: "NOK"
      state: >
        {{ (0.04 * states('sensor.energy_production_month')|float(0))|round(2) }}
    - name: energy_subsides
      unit_of_measurement: 'NOK/kWh'
      state: "{{ states('sensor.nordpool_subsides') }}"
    - unique_id: energy_by_subsides_and_production
      unit_of_measurement: 'NOK/kWh'
      state: >
        {% set pv_guess = states.sensor.pv_guess_by_factor.state|from_json %}
        {% set uncontrolled = states.input_text.uncontrolled_estimate.state|from_json %}
        {% set energy_price =  states.sensor.energy_all_nok_kwh.attributes.prices %}
        {% set price_to_grid = states.sensor.to_grid_today_nok_kwh.state|from_json  + 
                               states.sensor.to_grid_tomorrow_nok_kwh.state|from_json %}
        {% set subsides = states.sensor.energy_subsides.state|float %}
        {% set i = now().hour %}
        {{ price_to_grid[i] if (pv_guess[0] - uncontrolled[i]) > 0 else
          (energy_price[i] - subsides)|round(4) }} 
      attributes:
        friendly_name: "Energycost @ rypeveien"
        prices: >
          {% set delivered = states.input_text.delivered_grid_today.state|from_json %}
          {% set pv_guess = states.sensor.pv_guess_by_factor.state|from_json %}
          {% set uncontrolled = states.input_text.uncontrolled_estimate.state|from_json %}
          {% set uncontrolled = uncontrolled + uncontrolled %}
          {% set energy_price =  states.sensor.energy_all_nok_kwh.attributes.prices %}
          {% set price_to_grid = states.sensor.to_grid_today_nok_kwh.state|from_json  + 
                                 states.sensor.to_grid_tomorrow_nok_kwh.state|from_json %}
          {% set subsides = states.sensor.energy_subsides.state|float %}
          {% set var = namespace ( price = [] ) %}
          {% for i in range(energy_price|length) %}
            {% set var.price = var.price + [
                price_to_grid[i] if (i < delivered|length and delivered[i]|float > 0) or 
                 ( i >= delivered|length and (pv_guess[i] - uncontrolled[i]) > 0) else
                (energy_price[i] - subsides)|round(4) ] %} 
          {% endfor %}
          {{ var.price|to_json }}
        solar: >
          {% set delivered = states.input_text.delivered_grid_today.state|from_json %}
          {% set pv_guess = states.sensor.pv_guess_by_factor.state|from_json %}
          {% set uncontrolled = states.input_text.uncontrolled_estimate.state|from_json %}
          {% set uncontrolled = uncontrolled + uncontrolled %}
          {% set price_to_grid = states.sensor.to_grid_today_nok_kwh.state|from_json + 
                                 states.sensor.to_grid_tomorrow_nok_kwh.state|from_json %}
          {% set var = namespace ( price = [] ) %}
          {% for i in range(price_to_grid|length) %}
            {% set var.price = var.price + [
                price_to_grid[i] if (i < delivered|length and delivered[i]|float > 0) or 
                                    (i >= delivered|length and (pv_guess[i] - uncontrolled[i]) > 0) else
                0  ] %} 
          {% endfor %}
          {{ var.price|to_json }}
        subsides: >
          {% set delivered = states.input_text.delivered_grid_today.state|from_json %}
          {% set pv_guess = states.sensor.pv_guess_by_factor.state|from_json %}
          {% set uncontrolled = states.input_text.uncontrolled_estimate.state|from_json %}
          {% set uncontrolled = uncontrolled + uncontrolled %}
          {% set energy_price =  states.sensor.energy_all_nok_kwh.attributes.prices %}
          {% set subsides = states.sensor.energy_subsides.state|float %}
          {% set var = namespace ( price = [] ) %}
          {% for i in range(energy_price|length) %}
            {% set var.price = var.price + [
                0 if (i < delivered|length and delivered[i]|float > 0) or 
                     (i >= delivered|length and (pv_guess[i] - uncontrolled[i]) > 0) else
                (energy_price[i] - subsides)|round(4) ] %} 
          {% endfor %}
          {{ var.price|to_json }}
        analyzer: >
          {% set v = namespace(priceanalyze = [], prices_with_floor = []) %}
          {% set prices =
             state_attr('sensor.template_energy_by_subsides_and_production','prices') %}
          {% set floor = prices|min + 0.00001 if prices|min <= 0 else 0 %}
          {% for hour in range(prices|length) %}
          {% set v.prices_with_floor = v.prices_with_floor + [prices[hour] - floor ] %}
          {% endfor %}
          {% set prices = v.prices_with_floor %}
          {% set diff = (prices|min / prices|max) - 1 %}
          {% set p_threshold = (diff / 4) * -1 %}
          {% set gp_threshold = 1 - p_threshold %}
          {% set fp_threshold = 1 + p_threshold %}
          {% for hour in range(prices|length) %}
          {% set gaining = prices[hour]/max(prices[hour:hour+3]) < gp_threshold %}
          {% set falling = prices[hour]/min(prices[hour:hour+4]) > fp_threshold %}
          {% set ret = -1 if hour > (prices|length - 1) and (prices[hour + 1] / prices[hour]) < 0.8
                      else -1 if prices[hour] >= max(prices)
                      else 1 if prices[hour] <= min(prices)
                      else -1 if hour < prices|length - 1 and prices[hour+1] / prices[hour] < 0.60
                      else 1 if gaining and prices[hour] < (prices|sort(1))[4]
                      else -1 if falling and prices[hour] > average(prices)
                      else 0 if prices[hour] <= (prices|sort(0))[9] and (not gaining or falling)
                      else 0 %}
          {% set v.priceanalyze = v.priceanalyze + [ret] %}
          {% endfor %}
          {{ v.priceanalyze |to_json }}

    - unique_id: grid_charge_rates
      state: >
        {{ { "flat": 0.3739, 
             "night": 0.4251,
             "day": 0.5251 }|to_json }}
      attributes:
        friendly_name: "Grid charge rates"
    - unique_id: grid_charge
      unit_of_measurement: 'NOK/kWh'
      state: >
        {% set charge = states.sensor.template_grid_charge_rates.state|from_json %}
        {{ charge.flat if now().year == 2022 and now().month < 7 else
            charge.day if now().hour >= 6 and now().hour < 22 else
            charge.night }}
      attributes:
        friendly_name: "Grid charge by hours"
        prices: >
          {% set charge = states.sensor.template_grid_charge_rates.state|from_json %}
          {% set var = namespace ( charge = [] ) %}
          {% for h in range(48) %}
            {% set check = now() + timedelta (hours=h - now().hour) %}
            {% set var.charge = var.charge + [ charge.flat if check.year == 2022 and check.month < 7 else
                                               charge.day if check.hour >= 6 and check.hour < 22 else
                                               charge.night ] %}
          {% endfor %}
          {{ var.charge|to_json }}
    - name: analyzer_updown
      state: "{{ state_attr('sensor.template_energy_by_subsides_and_production', 'analyzer')[now().hour] }}"
    - name: energy_raw_nok_kwh
      unit_of_measurement: 'NOK/kWh'
      state: '{{ (states(''input_text.tibber_today'')|from_json)[now().hour] }}'
    - name: energy_today_nok_kwh
      state: >
        {% set prices = namespace(list=[]) %}
        {% set priceInfo = states('input_text.tibber_today')|from_json %}
        {% for i in range(priceInfo|length) %}
          {% set prices.list = prices.list + [(priceInfo[i] * 1.25 + 0.01 + state_attr('sensor.template_grid_charge', 'prices')[i]|float)|round(3)] %}
        {% endfor %}
        {{ prices.list|to_json }}
    - name: to_grid_today_nok_kwh
      state: >
        {% set prices = namespace(list=[]) %}
        {% set priceInfo = states('input_text.tibber_today')|from_json %}
        {% for i in range(priceInfo|length) %}
          {% set prices.list = prices.list + [(priceInfo[i] + 0.04)|round(3)] %}
        {% endfor %}
        {{ prices.list|to_json }}
    - name: energy_raw_today_average_nok_kwh
      unit_of_measurement: "NOK/kWh"
      state: >
        {% set prices = namespace(sum=0) %}
        {% set priceInfo = states('input_text.tibber_today')|from_json %}
        {% for i in range(priceInfo|length) %}
          {% set prices.sum = prices.sum + priceInfo[i] %}
        {% endfor %}
        {{ (prices.sum / priceInfo|length)|round(5) }}
    - name: analyzer
      state: '{{ states.sensor.template_energy_by_subsides_and_production.attributes.analyzer }}'
    - name: energy_today_average_nok_kwh
      unit_of_measurement: "NOK/kWh"
      state: >
        {% set prices = namespace(sum=0) %}
        {% set priceInfo = states('input_text.tibber_today')|from_json %}
        {% for i in range(priceInfo|length) %}
          {% set prices.sum = prices.sum + (priceInfo[i] * 1.25 + 0.01 + state_attr('sensor.template_grid_charge', 'prices')[i]|float)|round(3) %}
        {% endfor %}
        {{ (prices.sum / priceInfo|length)|round(3) }}
    - name: energy_tomorrow_nok_kwh
      state: >
        {% set prices = namespace(list=[]) %}
        {% set priceInfo = states('input_text.tibber_tomorrow')|from_json %}
        {% for i in range(priceInfo|length) %}
          {% set prices.list = prices.list + [(priceInfo[i] * 1.25 + 0.01 + state_attr('sensor.template_grid_charge', 'prices')[i+24]|float)|round(3)] %}
        {% endfor %}
        {{ prices.list|to_json }}
    - name: to_grid_tomorrow_nok_kwh
      state: >
        {% set prices = namespace(list=[]) %}
        {% set priceInfo = states('input_text.tibber_tomorrow')|from_json %}
        {% for i in range(priceInfo|length) %}
          {% set prices.list = prices.list + [(priceInfo[i] + 0.04)|round(3)] %}
        {% endfor %}
        {{ prices.list|to_json }}
    - name: energy_tomorrow_average_nok_kwh
      unit_of_measurement: "NOK/kWh"
      state: >
        {% set prices = namespace(sum=0) %}
        {% set priceInfo = states('input_text.tibber_tomorrow')|from_json %}
        {% for i in range(priceInfo|length) %}
          {% set prices.sum = prices.sum + (priceInfo[i] * 1.25 + 0.01 + state_attr('sensor.template_grid_charge', 'prices')[i+24]|float)|round(3) %}
        {% endfor %}
        {{ (prices.sum / priceInfo|length)|round(3) }}
    - name: energy_all_nok_kwh
      unit_of_measurement: "NOK/kWh"
      state: '{{ (states.sensor.energy_today_nok_kwh.state|from_json)[now().hour] }}'
      attributes:
        prices: >
          {{ (states.sensor.energy_today_nok_kwh.state|from_json + 
              states.sensor.energy_tomorrow_nok_kwh.state|from_json)|to_json }}

automation:
  - id: '1647958426770'
    alias: 'Update tibber price '
    description: ''
    trigger:
    - platform: state
      entity_id: sensor.tibber_rest
      id: tibber_rest
    - platform: template
      value_template: >
        {% set today = states('input_text.tibber_today') %}
        {{ today == '[]' or today  == 'unknown' or 
           now().day != as_local(states.input_text.tibber_today.last_updated).day }}
    - platform: template
      value_template: >
        {% set five = now().minute/5 %}
        {{ five == (five)|int and now().hour > 12 
           and (states('input_text.tibber_tomorrow') == '[]' or states('input_text.tibber_tomorrow') == 'unknown') }}
    condition:
    - condition: template
      value_template: '{{ states.automation.update_tibber_price.attributes.current == 0 }}'
    variables:
      update_delay: '{{ range(1,290)|random|int }}'
    action:
    - choose:
      - conditions:
        - condition: template
          value_template: >
            {% set tomorrow = states('input_text.tibber_tomorrow') %}
            {% set today = states('input_text.tibber_today') %}
            {{ tomorrow == '[]' or tomorrow  == 'unknown' or
               today == '[]' or today  == 'unknown' }}
        sequence: 
        - delay: 
            seconds: '{{ update_delay }}'
        - choose:
          - conditions:
            - condition: template
              value_template: '{{ now().timestamp() - states.sensor.tibber_rest.last_updated.timestamp() > update_delay  }}'
            sequence: 
            - service: homeassistant.update_entity
              target:
                entity_id: sensor.tibber_rest
              data: {}
          default: []
      - conditions:
        - condition: template
          value_template: >
            {% set tomorrow = states('input_text.tibber_tomorrow') %}
            {% set today = states('input_text.tibber_today') %}
            {{ tomorrow == '[]' or tomorrow  == 'unknown' or
               today == '[]' or today  == 'unknown' }}
        - condition: template
          value_template: "{{ state_attr('sensor.tibber_rest', 'today')|length > 0 }}"
        sequence: 
        - service: input_text.set_value
          data:
            value: >
              {% set prices = namespace(list=[]) %}
              {% set priceInfo = state_attr('sensor.tibber_rest', 'today') %}
              {% for i in range(priceInfo|length) %}
                {% set hour =  strptime(priceInfo[i].startsAt, '%Y-%m-%dT%H:%M:%S.%f%z').hour %}
                {% if hour > prices.list|length %}
                  {% set prices.list = prices.list + [prices.list[i-1]] %}
                {% endif %}
                {% set prices.list = prices.list + [priceInfo[i].energy] %}
              {% endfor %}
              {{ prices.list|to_json }}
          target: 
            entity_id: input_text.tibber_today
      default: []
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ as_local(states.input_text.tibber_today.last_updated).day != now().day }}'
        - condition: template
          value_template: >
            {% set tomorrow = states('input_text.tibber_tomorrow') %}
            {{ tomorrow != '[]' and tomorrow  != 'unknown' }}
        sequence: 
        - service: input_text.set_value
          data:
            value: '{{ states.input_text.tibber_tomorrow.state }}'
          target: 
            entity_id: input_text.tibber_today
        - service: input_text.set_value
          data:
            value: '[]'
          target: 
            entity_id: input_text.tibber_tomorrow
      - conditions:
        - condition: template
          value_template: >
            {% set tomorrow = states('input_text.tibber_tomorrow') %}
            {{ tomorrow == '[]' or tomorrow  == 'unknown' }}
        - condition: template
          value_template: '{{ now().timestamp() - states.sensor.tibber_rest.last_updated.timestamp() < 300 }}'
        - condition: template
          value_template: "{{ state_attr('sensor.tibber_rest', 'tomorrow')|length > 0 }}"
        sequence: 
        - service: input_text.set_value
          data:
            value: >
              {% set prices = namespace(list=[]) %}
              {% set priceInfo = state_attr('sensor.tibber_rest', 'tomorrow') %}
              {% for i in range(priceInfo|length) %}
                {% set hour =  strptime(priceInfo[i].startsAt, '%Y-%m-%dT%H:%M:%S.%f%z').hour %}
                {% if hour > prices.list|length %}
                  {% set prices.list = prices.list + [prices.list[i-1]] %}
                {% endif %}
                {% set prices.list = prices.list + [priceInfo[i].energy] %}
              {% endfor %}
              {{ prices.list|to_json }}
          target: 
            entity_id: input_text.tibber_tomorrow
        - condition: template
          value_template: >
            {% set today = states('input_text.tibber_today') %}
            {{ today == '[]' or tomorrow  == 'unknown' }}
        - service: input_text.set_value
          data:
            value: >
              {% set prices = namespace(list=[]) %}
              {% set priceInfo = state_attr('sensor.tibber_rest', 'today') %}
              {% for i in range(priceInfo|length) %}
                {% set hour =  strptime(priceInfo[i].startsAt, '%Y-%m-%dT%H:%M:%S.%f%z').hour %}
                {% if hour > prices.list|length %}
                  {% set prices.list = prices.list + [prices.list[i-1]] %}
                {% endif %}
                {% set prices.list = prices.list + [priceInfo[i].energy] %}
              {% endfor %}
              {{ prices.list|to_json }}
          target: 
            entity_id: input_text.tibber_today
      default: []
    mode: single

  - id: '1650144839'
    alias: Calculate monthly raw average price
    description: ''
    trigger: 
    - platform: time
      at: "00:00"
    condition: []
    variables:
      new_list: >
        {% set today = states('input_text.tibber_today')|from_json %}
        {% set avg  = [today|average|round(4)] +  states('input_text.tibber_month_average')|from_json %}
        {% set month = now().month %}
        {% set length = 31 if month in [1, 3, 5, 7, 8, 10, 12] else
                        30 if month in [4, 6, 9, 11] else
                        29 if now().year % 4 == 0 else 28 %}
        {{ month[:length] }}
    action:
    - condition: template
      value_template: >
        {{ now().day != as_local(states.input_text.tibber_month_average.last_updated).day }}
    - service: input_text.set_value
      data:
        value: '{{ new_list }}'
      target: 
        entity_id: input_text.tibber_month_average

