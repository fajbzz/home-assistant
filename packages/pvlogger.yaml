utility_meter:
  pvlogger_hourly:
    source: sensor.pvlogger_power
    cycle: hourly
  
rest:
  - resource: "http://localhost/restproxy/pvlogger_factor.php"
    scan_interval: 3600
    sensor: 
      - name: pvlogger_factor
        value_template: '{{ value_json|to_json }}'

template:
  - sensor:
    - name: forecast_solar_next_hour_watt
      unit_of_measurement: "W"
      state: "{{ (states('sensor.energy_next_hour')|float)*1000|int }}"
    - name: pv_guess_by_factor
      state: >
        {% set numbers = states('input_text.met_cache')|from_json %}
        {% set factors = states('sensor.pvlogger_factor') %}
        {% set factors = [] if factors in ['unknown'] else factors|from_json %}
        {% set potentials = states.input_text.met2_potential_max.state|from_json %}
        {% set potentials = potentials + potentials %}
        {% set local = namespace(guess=[]) %}
        {% for number in numbers %}
          {% set num2fac = factors[number]|float(2) if factors[number] is defined else 0.1 %}
          {% set local.guess = local.guess + [ (num2fac * potentials[loop.index-1])|int ] %}
        {% endfor %}
        {{ local.guess }}
    - name: pv_guess_this_hour
      unit_of_measurement: "W"
      state: >
        {{ (states.sensor.pv_guess_by_factor.state|from_json)[now().hour] }}
    - name: pv_guess_12h
      state: >
        {{ (states.sensor.pv_guess_by_factor.state|from_json)[now().hour+12] }}
    - name: pv_guess_24h
      state: >
        {{ (states.sensor.pv_guess_by_factor.state|from_json)[now().hour+24] }}
    - name: forecast_solar_this_hour
      unit_of_measurement: "W"
      state: >
        {% set n48 = states('sensor.forecast_solar_48h') %}
        {{ (n48|from_json)[now().hour] if n48 not in ['unknown', 'undefined', 'none','unavailable'] else 0 }}
  - trigger:
    - platform: time_pattern
      minutes: 1
    sensor: 
    - name: forecast_solar_48h
      state: >
        {% set n12 = states('sensor.power_production_next_12hours')|int(default=0) %}
        {% set n24 = states('sensor.power_production_next_24hours')|int(default=0) %}
        {% set n48 = states('sensor.forecast_solar_48h') %}
        {% set n48 = n48|from_json if n48 not in ['unknown', 'undefined', 'none','unavailable'] else 
                    [ 0, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0 ] %}
        {% set hour = now().hour %}
        {% set n48 = n48 if n48[hour+24:]|sum == 0 else 
                     n48[hour+24:] + 
                    [ 0, 0, 0, 0, 0, 0, 
                      0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0 ] %}
        {% set n48 = n48[:hour+12] + [ n12 ] + n48[hour+13:] %}
        {% set n48 = n48[:hour+24] + [ n24 ] + n48[hour+25:] %}
        {{ n48|to_json }}

automation: 
  - id: '1658480557485'
    alias: 'Update solar potentiale cache'
    trigger: 
    - platform: state
      entity_id: sensor.pvlogger_potentiale
    action:
    - service: input_text.set_value
      data:
        value: "{{ states('sensor.pvlogger_potentiale') }}"
      target: 
        entity_id: input_text.met2_potential_max
